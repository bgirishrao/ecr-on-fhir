server.port=8081
# Database Properties
#spring.datasource.url=jdbc:postgresql://localhost:5432/ecrresponder
#spring.datasource.username=postgres
#spring.datasource.password=manager1

spring.datasource.url = ${DB_HOST}:${DB_PORT}/postgres
spring.datasource.username = ${DB_USERNAME}
spring.datasource.password = ${DB_PASSWORD}

# Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL92Dialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update

spring.h2.console.enabled=true

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

phaui.endpoint=http://localhost:8080/api/
responder.endpoint=http://localhost:8080/eicrresponder/api/
responder.validator=http://localhost:8080/fhirvalidator/r4/resource/validate

jwt.prikey.audience=http://localhost:8180/auth/realms/ecr_responsder/protocol/openid-connect/token
jwt.prikey.subject=jwt_ecr_responder_client
jwt.prikey.issuer=jwt_ecr_responder_client
jwt.accesstoken.endpoint=http://localhost:8180/auth/realms/ecr_responsder/protocol/openid-connect/token
jwt.accesstoken.client=jwt_ecr_responder_client

responder.posttopha=yes

responder.storetos3=yes

# AWS s3 Settings
s3.accessKeyId=
s3.secretKey=
s3.bucketName=
s3.region=

# AWS s3 Settings
pha.s3.accessKeyId=
pha.s3.secretKey=
pha.s3.bucketName=
pha.s3.region=


jwks.keystore.location=
jwks.keystore.password=
jwks.keystore.alias=
